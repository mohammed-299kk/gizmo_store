rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Products rules
    match /products/{productId} {
      // Allow reading products for everyone
      allow read: if true;
      
      // Allow writing for admin users only
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users database rules
    match /users/{userId} {
      // Allow user to read and write their own data only
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admin users to read all user data
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // User favorites rules
      match /favorites/{favoriteId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User cart rules
      match /cart/{cartItemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User orders rules
      match /orders/{orderId} {
        // Users can read and create their own orders
        allow read, create: if request.auth != null && request.auth.uid == userId;
        
        // Users can only update order status to 'cancelled' if current status is 'pending'
        allow update: if request.auth != null && request.auth.uid == userId &&
          resource.data.status == 'pending' && 
          request.resource.data.status == 'cancelled';
        
        // Admin users can read and update all orders
        allow read, update: if request.auth != null && 
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      // User addresses rules
      match /addresses/{addressId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Categories rules
    match /categories/{categoryId} {
      // Allow reading categories for everyone
      allow read: if true;
      
      // Allow writing for admin users only
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Reviews and ratings rules
    match /reviews/{reviewId} {
      // Allow reading reviews for everyone
      allow read: if true;
      
      // Allow user to create reviews with their own userId
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // Allow user to update/delete their own reviews only
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Allow admin users to delete any review
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Root-level orders collection rules
    match /orders/{orderId} {
      // Users can read and create their own orders
      allow read, create: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Allow creating orders with required fields for simulation
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['userId', 'totalAmount', 'status', 'paymentMethod', 'createdAt']) &&
        request.resource.data.paymentMethod in ['credit_card', 'cash_on_delivery'] &&
        request.resource.data.status in ['pending', 'paid', 'cancelled', 'delivered'];
      
      // Users can only update order status to 'cancelled' if current status is 'pending'
      allow update: if request.auth != null && request.auth.uid == resource.data.userId &&
        resource.data.status == 'pending' && 
        request.resource.data.status == 'cancelled';
      
      // Admin users can read and update all orders
      allow read, update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Analytics rules (read only)
    match /analytics/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Writing only through Cloud Functions
    }
  }
}