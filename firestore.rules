rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Products - Read access for all, write access for authenticated users (temporary for testing)
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Users - Users can read/write their own data, admin can read all
    match /users/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
    }
    
    // Categories - Read access for all, write access for admin only
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Reviews - Read access for all, authenticated users can write their own reviews
    match /reviews/{reviewId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Orders - Users can read/write their own orders, admin can read all
    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Wishlists - Users can read/write their own wishlists
    match /wishlists/{wishlistId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Coupons - Read access for authenticated users, write access for admin only
    match /coupons/{couponId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Analytics - Admin only
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
    
    // User Preferences - Allow any authenticated user
    match /user_preferences/{userId} {
      allow read, write: if request.auth != null;
    }

    // Also support old naming convention
    match /userPreferences/{userId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow anonymous access to read products and categories for guest browsing
    match /{document=**} {
      allow read: if resource != null && 
        (resource.__name__.matches('.*/products/.*') || 
         resource.__name__.matches('.*/categories/.*'));
    }
    
    // User Addresses - Users can read/write their own addresses (subcollection)
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
    }
  }
}